@page "/login"
@using KPSL.Collacteral.Shared
@inject IBlazeDebugger KPSL;
@using System.Security.Claims
@using Csla
@using Csla.Blazor
@using Csla.Blazor.Client.Authentication
@inject ViewModel<UserCredentials> vm
@inject CslaUserService userService
@inject NavigationManager nav
@inject HttpClient Http
<h3>Login</h3>

<p class="text-danger">@vm.ViewModelErrorText</p>
<p class="text-danger">@ErrorText</p>
@if (vm.Model == null)
{
  <div>Loading...</div>
}
else
{
  <table>
    <thead>
      <tr>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <TextInputRow Property="vm.GetPropertyInfo(nameof(vm.Model.Username))" />
      <TextInputRow Property="vm.GetPropertyInfo(nameof(vm.Model.Password))" InputType="password" />
    </tbody>
  </table>
  <button @onclick="VerifyCredentials" disabled="@(!vm.Model.IsSavable)">Save</button>
  
}

@code {

  protected override void OnInitialized()
  {
    vm.ModelPropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
  }

  protected override async Task OnParametersSetAsync()
  {
    await vm.RefreshAsync();
  }
private string ErrorText { get; set; }
  private async void VerifyCredentials()
  {

    var identity = await DataPortal.FetchAsync<CustomIdentity>(vm.Model); 
      Console.WriteLine(identity);
       KPSL.ConsoleLog("identity", identity);
   
     if (identity.IsAuthenticated)

    {
      var baseidentity = new ClaimsIdentity(identity.AuthenticationType); 
      KPSL.ConsoleLog("baseidentity", baseidentity);
   
       baseidentity.AddClaim(new Claim(ClaimTypes.Name, identity.Name));
    if (identity.Roles != null)
      foreach (var item in identity.Roles) 
    
      baseidentity.AddClaim(new Claim(ClaimTypes.Role, identity.Name));
      var principal = new System.Security.Claims.ClaimsPrincipal(baseidentity); 
      
      userService.CurrentUser = principal;
      nav.NavigateTo("/");
      KPSL.ConsoleLog("principal", principal);
      KPSL.ConsoleLog("nav", nav);
    }
    else
    {
      ErrorText = "Invalid credentials";
      StateHasChanged();
    }
  }

}